{"ast":null,"code":"import * as actionTypes from '../actions';\nconst initialstate = {\n  newsItem: [],\n  newsloading: false,\n  newserror: '',\n  newsTitle: '',\n  newsDescription: '',\n  newsDate: '',\n  newsImage: '',\n  newsURL: ''\n};\n\nconst reducer = (state = initialstate, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_NEWS_REQUEST:\n      return { ...state,\n        newsloading: !state.newsloading\n      };\n\n    case actionTypes.FETCH_NEWS_SUCCESS:\n      return { ...state,\n        newsloading: !state.newsloading,\n        newsItem: state.newsItem.concat(action.payload).map(el => ({ ...el,\n          liked: false\n        }))\n      };\n\n    case actionTypes.FETCH_NEWS_FAILURE:\n      return { ...state,\n        newserror: state.newserror.concat(action.payload)\n      };\n\n    case actionTypes.GET_NEWS_TITLE:\n      return { ...state,\n        newsTitle: action.payload\n      };\n\n    case actionTypes.GET_NEWS_DESCRIPTION:\n      return { ...state,\n        newsDescription: action.payload\n      };\n\n    case actionTypes.GET_NEWS_IMAGE:\n      return { ...state,\n        newsImage: action.payload\n      };\n\n    case actionTypes.GET_NEWS_DATE:\n      return { ...state,\n        newsDate: action.payload\n      };\n\n    case actionTypes.GET_NEWS_URL:\n      return { ...state,\n        newsURL: action.payload\n      };\n\n    case actionTypes.TOGGLE_FAVORITE:\n      const newItems = [...state.newsItem].map(item => {\n        const newItem = { ...item\n        };\n\n        if (item.url === action.payload) {\n          newItem.liked = !item.liked;\n          console.log(newItem);\n        }\n\n        return newItem;\n      });\n      return { ...state,\n        newsItem: newItems\n      };\n\n    default:\n      break;\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/namit/React Projects/wizikey-assignment/src/store/reducers/newsList.js"],"names":["actionTypes","initialstate","newsItem","newsloading","newserror","newsTitle","newsDescription","newsDate","newsImage","newsURL","reducer","state","action","type","FETCH_NEWS_REQUEST","FETCH_NEWS_SUCCESS","concat","payload","map","el","liked","FETCH_NEWS_FAILURE","GET_NEWS_TITLE","GET_NEWS_DESCRIPTION","GET_NEWS_IMAGE","GET_NEWS_DATE","GET_NEWS_URL","TOGGLE_FAVORITE","newItems","item","newItem","url","console","log"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,YAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE,EADO;AAEjBC,EAAAA,WAAW,EAAE,KAFI;AAGjBC,EAAAA,SAAS,EAAE,EAHM;AAIjBC,EAAAA,SAAS,EAAE,EAJM;AAKjBC,EAAAA,eAAe,EAAE,EALA;AAMjBC,EAAAA,QAAQ,EAAE,EANO;AAOjBC,EAAAA,SAAS,EAAE,EAPM;AAQjBC,EAAAA,OAAO,EAAE;AARQ,CAArB;;AAWA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACV,YAAP,EAAqBW,MAArB,KAAgC;AAC5C,UAAOA,MAAM,CAACC,IAAd;AACK,SAAKb,WAAW,CAACc,kBAAjB;AACI,aAAM,EACF,GAAGH,KADD;AAEFR,QAAAA,WAAW,EAAE,CAACQ,KAAK,CAACR;AAFlB,OAAN;;AAIJ,SAAKH,WAAW,CAACe,kBAAjB;AACI,aAAM,EACF,GAAGJ,KADD;AAEFR,QAAAA,WAAW,EAAE,CAACQ,KAAK,CAACR,WAFlB;AAGFD,QAAAA,QAAQ,EAAES,KAAK,CAACT,QAAN,CAAec,MAAf,CAAsBJ,MAAM,CAACK,OAA7B,EAAsCC,GAAtC,CAA0CC,EAAE,KAAK,EACxD,GAAGA,EADqD;AAExDC,UAAAA,KAAK,EAAE;AAFiD,SAAL,CAA5C;AAHR,OAAN;;AAQJ,SAAKpB,WAAW,CAACqB,kBAAjB;AACI,aAAM,EACF,GAAGV,KADD;AAEFP,QAAAA,SAAS,EAAEO,KAAK,CAACP,SAAN,CAAgBY,MAAhB,CAAuBJ,MAAM,CAACK,OAA9B;AAFT,OAAN;;AAIJ,SAAKjB,WAAW,CAACsB,cAAjB;AACI,aAAM,EACF,GAAGX,KADD;AAEFN,QAAAA,SAAS,EAAEO,MAAM,CAACK;AAFhB,OAAN;;AAIJ,SAAKjB,WAAW,CAACuB,oBAAjB;AACI,aAAM,EACF,GAAGZ,KADD;AAEFL,QAAAA,eAAe,EAAEM,MAAM,CAACK;AAFtB,OAAN;;AAIJ,SAAKjB,WAAW,CAACwB,cAAjB;AACI,aAAM,EACF,GAAGb,KADD;AAEFH,QAAAA,SAAS,EAAEI,MAAM,CAACK;AAFhB,OAAN;;AAIJ,SAAKjB,WAAW,CAACyB,aAAjB;AACI,aAAM,EACF,GAAGd,KADD;AAEFJ,QAAAA,QAAQ,EAAEK,MAAM,CAACK;AAFf,OAAN;;AAIJ,SAAKjB,WAAW,CAAC0B,YAAjB;AACI,aAAM,EACF,GAAGf,KADD;AAEFF,QAAAA,OAAO,EAAEG,MAAM,CAACK;AAFd,OAAN;;AAIJ,SAAKjB,WAAW,CAAC2B,eAAjB;AACI,YAAMC,QAAQ,GAAG,CAAC,GAAGjB,KAAK,CAACT,QAAV,EAAoBgB,GAApB,CAAwBW,IAAI,IAAI;AAC9C,cAAMC,OAAO,GAAG,EAAC,GAAGD;AAAJ,SAAhB;;AACC,YAAGA,IAAI,CAACE,GAAL,KAAanB,MAAM,CAACK,OAAvB,EAA+B;AAC5Ba,UAAAA,OAAO,CAACV,KAAR,GAAgB,CAACS,IAAI,CAACT,KAAtB;AACAY,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACF;;AACD,eAAOA,OAAP;AACH,OAPgB,CAAjB;AAQA,aAAM,EACF,GAAGnB,KADD;AAEFT,QAAAA,QAAQ,EAAE0B;AAFR,OAAN;;AAIJ;AACI;AA3DT;;AA6DA,SAAOjB,KAAP;AACH,CA/DD;;AAiEA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from '../actions';\n\nconst initialstate = {\n    newsItem: [],\n    newsloading: false,\n    newserror: '',\n    newsTitle: '',\n    newsDescription: '',\n    newsDate: '',\n    newsImage: '',\n    newsURL: ''\n}\n\nconst reducer = (state=initialstate, action) => {\n    switch(action.type){\n         case actionTypes.FETCH_NEWS_REQUEST:\n             return{\n                 ...state,\n                 newsloading: !state.newsloading\n             }\n         case actionTypes.FETCH_NEWS_SUCCESS:\n             return{\n                 ...state,\n                 newsloading: !state.newsloading,\n                 newsItem: state.newsItem.concat(action.payload).map(el => ({\n                    ...el,\n                    liked: false,\n                })),\n              } \n         case actionTypes.FETCH_NEWS_FAILURE:\n             return{\n                 ...state,\n                 newserror: state.newserror.concat(action.payload)\n             }\n         case actionTypes.GET_NEWS_TITLE:\n             return{\n                 ...state,\n                 newsTitle: action.payload,\n             }\n         case actionTypes.GET_NEWS_DESCRIPTION:\n             return{\n                 ...state,\n                 newsDescription: action.payload\n             }\n         case actionTypes.GET_NEWS_IMAGE:\n             return{\n                 ...state,\n                 newsImage: action.payload\n             }\n         case actionTypes.GET_NEWS_DATE:\n             return{\n                 ...state,\n                 newsDate: action.payload\n             }\n         case actionTypes.GET_NEWS_URL:\n             return{\n                 ...state,\n                 newsURL: action.payload\n             } \n         case actionTypes.TOGGLE_FAVORITE:\n             const newItems = [...state.newsItem].map(item => {\n                const newItem = {...item};\n                 if(item.url === action.payload){\n                    newItem.liked = !item.liked;\n                    console.log(newItem);\n                 }\n                 return newItem;                 \n             });\n             return{\n                 ...state,\n                 newsItem: newItems\n             }\n         default:\n             break;        \n    }\n    return state;\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}